const mongoose = require('mongoose')

const bookingSchema = new mongoose.Schema({
	checkIn: {
		// дата заезда
		type: String,
		required: true,
	},
	checkOut: {
		// дата выезда
		type: String,
		required: true,
	},
	booker: {
		// связали бронирование с конкретным (текущим) пользователем; когда пользователь бронирует номер, создаётся новый документ в коллекции "bookers"
		type: mongoose.Schema.Types.ObjectId, // тип - идентификатор; в нашем случае это id бронирующего пользователя
		ref: 'User', // ссылка на модель User (коллекцию users в MongoDB); говорим, что выбранные даты относятся к конкретному (текущему) пользователю, чтобы знать, какой именно пользователь выбрал эти даты
	},
	//room: {
	//	// связали бронирование с конкретным (выбранным) номером
	//	type: mongoose.Schema.Types.ObjectId, // идентификатор номера
	//	ref: 'Room', // ссылка на модель Room (коллекцию rooms в MongoDB)
	//},
})
// После бронирования создаётся новый документ в коллекции "bookings", содержащий информацию о датах заезда/выезда, пользователе, который сделал бронирование, и номере, который был забронирован. Информация о забронированном номере в коллекции "rooms" (Room) обновляется, чтобы связать этот номер с только что созданным бронированием.

const Booking = mongoose.model('Booking', bookingSchema)

module.exports = Booking
